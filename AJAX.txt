-- 1 What is AJAX --

	- AJAX = Asynchronous JS & XML
	

	== Typical use case ==
	
		- JS make request to retrieve data from specified URL
		
		- data received not necessary for replacing entire webpage content
			- can choose desired data to be replaced
			
			
	== History of AJAX ==
		- Google maps started using AJAX
		- Divide map into smaller tiles
		- only needed to load tiles that changed
		


	New version AJAX: (2014)
	
	fetch(uri)
	.then((res) => {
		return res.json();
	})
	.then((data) => {
		console.log(data);
	})
	.catch((err)=>{
		console.log(err.message);
	})
	
	Asynchronous Request
		- User can continue browsing webpage while request made
		- if synchronous (blocking request), user cannot do anything while fetching request
	




-- 2 ES6 Promises --
	
	- Promises:
	
		- wrapper around any asynchronous tasks
		- Promises to be used when dealing with the following tasks:
		
			- AJAX calls (fetch data from server)
			- reading files
			- timeouts
			- geolocation
			- database communication
			- anything with callback function (to prevent callback hell)
			
		- used in scenario when unsure when data will be received
			- can perform other task while awaiting response
			
		
		- Whenever Promise created, 2 functions is sent as arguments
			1) "resolve" function
			2) "reject" function
			
			- Only 1 of the function will get executed
				- If successful, "resolve" function will be executed
				- If unsuccessful, "reject" function will be executed
			
			- if resolve() function called, .then() will be executed & chained (if desired)
			- if reject() function called, .catch() will be executed
				- if any error between .then(), .catch() will also execute
			
			- .then() takes 1 argument (response)
				- value of response is whatever is passed in the resolve()
			- .catch() takes 1 argument (error)
			
			- .then() chaining: 
				- The return from previous .then() will be passed as argument in next .then()

	eg:
	
		let p1 = new Promise((resolve, reject) => {
			let x = 5;
			resolve(x); // pass x to (response) of .then() function
		});
		
		p1.then((response) => { 
			console.log(response); // value will be 5, passed from resolve()
			return response;
		})
		.then((response_2) => {
			console.log(response_2);
		})
		.catch((err) => { // runs if reject called or error in between thens
			console.log(err);
		})
		
	- Any functions that returns Promise can use .then() & .catch()
	
	




-- 3 fetch() fundamentals in AJAX --


	* To use fetch()
	
		1) npm init -y in desired folder
		2) add "type":"module" in package.json
		3) npm install node-fetch
		4) import fetch from "node-fetch";
	
	- fetch : Making HTTP request
		- typically fetching resource from provided URL
		- returns the data as response (can be handled using .then())
		
		
	eg:
		// if id > 10, causes error
		
		import fetch from "node-fetch";

		const root = "http://jsonplaceholder.typicode.com";
		let id = Math.floor(Math.random() * 20) + 1; //id between 1 to 20

		let uri = root + '/users/' + id;

		console.log(uri);

		fetch(uri)
		.then((response) => {
			if (response.status==200) {
				return response.json();
			} else{
				throw new Error("Invalid user ID");
			}
		})
		.then((response)=>console.log(response))
		.catch((err) => {
			console.log(err.message);
		})
		

-- 4 Fetch with Request & Headers Objects --

	- Instead of just using uri
	- utilize Request Object & Headers Object
	- provides more information / flexibility when using fetch() 
	
	Header Object: (https://developer.mozilla.org/en-US/docs/Web/API/Headers)
		- let h = new Header();
		- h.append(name, value);
		
			- name of header
				- "Content-Type" (POST | PUT | DELETE)
				- "Content-Length" (POST | PUT | DELETE)
				- "Accept"
				- "Accept-Language"
				- "X-Requested-With" (Custom, used in JS Framework) (XML-HTTP Request etc)
				- "User-Agent" (Previously unallowed, now ok)
				
			- eg: h.append("Accept", "application/json"); // create new rule
			
			- If existing header, can use set
				- h.set("Accept", "application/txt"); // update existing rule

	Request Object: (https://developer.mozilla.org/en-US/docs/Web/API/Request)
	
		- let req = new Request(uri); // simplest form
		
		- let req = new Request(uri, options); // options is JS object
		
			eg:
			
				let req = new Request(uri, {
					method: "GET",
					headers: h,
					mode:"cors"
				});
				
			- options (4 common properties) : HTTP_method | headers | body | mode 
			
			
			1) HTTP_method : "GET" | "PUT" | "POST" | "DELETE" 
				- GET: requesting data, received data automatically cached
				- POST: data sent to server to update info (need uuid to identify)
				- PUT: insert new data to server 
				- DELETE: sending parameter to delete certain things (need uuid to identify)
				- OPTIONS: To test connection
				
			2) headers (request):
				- every request has a header
				- Request headers | Response headers
				- some header parameters cannot be changed (to prevent spoofing)
					- some other parameters can be changed
							
			3) body
				- if sending info to server
				- typically for put / post / delete
				
			4) mode
				- "cors" typically
					- cross-origin resource sharing (allows restricted resource to be accessed)
			
			eg:

					import {Headers, Request} from "node-fetch";
					import fetch from "node-fetch";

					const root = "http://jsonplaceholder.typicode.com";
					let id = Math.floor(Math.random() * 20) + 1; //id between 1 to 20

					let uri = root + '/users/' + id;

					let h = new Headers();
					h.append('Accept', 'application/json');

					let req = new Request(uri, {
						method: "GET",
						headers: h,
						mode:"cors"
					});

					fetch(req)
					.then((response)=>{
						if (response.ok) { // ok means status 200 (success) or status 300 (cached)
							return response.json()
						} else {
							throw new Error("Failed to retrieve json data");
						}
					})
					.then((response_json)=> {
						console.log(response_json);
					})
					.catch((err)=>{
						console.log("Error caught: ", err.message);
					})



== 5 Sending AJAX form data to server using fetch() ==

	- previously was retrieving info using fetch()
	- this section will be sending info using fetch()'
	- typically for POST | PUT | DELETE etc.
	- body will be required for sending data through request
		- "GET" method not allowed to have body
		- "POST" method allowed to have body
	
	* Side Learning:
		- Query String: Similar to route parameters in Express
		
		eg: http://jsonplaceholder.typicode.com/posts?userId=8&id=71
		- ?userId=11&id=71 is the query string
		
	- using AJAX Built-in FormData() method
		- works with any AJAX requests
		- Manual specification of web form
			- HTML web form has "name" attribute & value
			- FormData() works the same way but creation via code
			
			
		eg.
			
				import {FormData, Request} from "node-fetch";
				import fetch from "node-fetch";

				const root = 'http://jsonplaceholder.typicode.com/';
				let uri = root + 'posts';

				let form_data = new FormData();
				form_data.append("userId", 3);
				form_data.append("title", 'Title Created');
				form_data.append('body', 'Content Created')

				let options = {
					method: 'POST',
					mode: 'cors',
					body: form_data
				}

				let req = new Request(uri, options);

				fetch(req)
				.then((resp) => {
					if (resp.ok) {
						return resp.json();
					} else {
						throw new Error("POST fail");
					}
				})
				.then((json_resp) => {
					console.log(json_resp);
				})
				.catch((err) => {
					console.log("Error caught: ", err.message);
				});

	
	
== 6 ES6 Promises methods ==
	- Different ways of initializing Promise object
	
		let p1 = new Promise((resolve, reject) => {
			if (true) {
				resolve("p1 resolved");
			} else {
				reject("p1 rejected");
			}
		})
		
		let p2 = Promise.resolve("p2 resolved");
		
		let p3 = () => Promise.reject(null);
		
		p1.then((result) => {
			console.log(result);
		})
		
		p2.then((result) => {
			console.log(result);
		})
		
		p3().then((res) => {
			console.log(res);
		})
		.catch((err) => {
			console.log(err.message);
		})


== 7 Promises all method ==
	- to check several promises
	- executes next action only after all promises are resolved
	
	
		let allClear = Promise.all([p1, p2, p3]);
		
		allClear.then((arr_results)=> {
			console.log(arr_results[0]);
			console.log(arr_results[1]);
			console.log(arr_results[2]);
		})
	

== 8 Promise race method ==

	- Send out several promises
	- so long as 1 promise resolves / rejects , will execute next action
	- order in the array matters.
		- if p1 fails, catch will be called
		- if p1 succeeds, .then will be called
		
	- in real world scenario (eg AJAX calls)
		- unsure when the response will be received
		- can use .race() method to handle whichever response received first
	
		let p1 = Promise.reject(111);
		let p2 = Promise.resolve(222);
		let p3 = new Promise((resolve, reject) => {
			setTimeout(resolve, 1000, 333);
		}
		
		let execute = Promise.race([p1, p2, p3]);
		execute.then((winning_result) => {
			console.log(winning_result);
		})
		.catch((err) => {
			console.log(err.message);
		})