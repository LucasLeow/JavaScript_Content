== 1 What is Async JS ==
    - start a task and finish it later
    - allow for other task to be performed while waiting for certain task to complete

    Synchronous JS:
        - wait for 1 action to complete before moving on
    
    Asynchronous JS:
        - starts an action then move on to do other things
        - will execute callback function once action completed
        - therefore, require callback function
        - typically in JS, if notice callback fn, likely the fn is Async

        3 ways to perform Async
            1) Callbacks (simple but leads to callback hell)
            2) Promises (better & neater)
            3) Generators (newest, much better)

== 2 AJAX Requests ==
    - Asynchronous Javascript & XML
    - communicate with server using http request
    - no need to reload page (interactive maps when zooming in / out (no need to refresh))
    - more recent using JSON instead of XML

    2 methods to do it:
        1) vanilla JS
            window.onload = function() {

                // XMLHttpRequest() object built-in to most modern browsers
                // allow browsers to make http requests

                let http = new XMLHttpRequest();

                http.onreadystatechange = function() { // executes function whenever ready state changes
                    console.log(http);
                    if (http.readystate == 4 && http.status == 200) {
                        console.log(JSON.parse(http.response)); // parses JSON to JS object
                            // JSON is text format of JS Object
                    }
                }

                // open method: sets up request but not actually grabbing the content
                    - open(<http_method>, <url_endpoint>, <trueForAsync>)
                    - tells JS where to get request from
                    - type of request
                    - async or sync

                http.open("GET", "data/tweets.json", true);
                http.send(); // execute http request

                console.log(http);

            }

            Ready States:
                0 - request not initialized (need to .open())
                1 - request set up
                2 - request sent
                3 - request in process
                4 - request complete

        2) jquery technique

            - need to import jquery CDN
            - simple .get(endpoint, callback(data)) method will handle everything

            $.get("data/tweets.json", (data) => {
                console.log(data);
            });


== 3 Callback Functions Async JS ==
    -  function (1) passed as argument to another function (2) to be executed upon completed of function (2)
    - susceptible to Callback hell in Async JS
        - callbacks nested within callbacks
            - will have triangular shape


== 4 Promise Async JS ==
    - Solution to Callback hell

    Promise object -> Action that hasn't finish but will finish eventually
    - placeholder for something that will happen in future
    - contains resolve & reject functions
    - if success, resolve(data) runs
    - if failure,reject(data) runs


    function getData(url) {
        return new Promise((resolve, reject) => {
            var xhttp = new XMLHttpRequest();
            xhttp.open("GET", url, true); //true for async, false for sync
            xhttp.onload = function() {
                if (xhttp.status == 200) {
                    resolve(JSON.parse(xhttp.response)); // passing the following data to resolve. can be accessed from .then(data)
                } else {
                    reject(xhttp.statusText); // if fails, pass data to reject. can be accessed from .catch(err)
                }
            };
            xhttp.onerror = function() {
                reject(xttp.statusText);
            };
            xhttp.send(); // send the request
        });
    }

    var promise = getData("data/tweets.json");
    promise
    .then((data) => {
        console.log(data);
    })
    .catch((err) => {
        console.log(err);
    })

    Real beauty:
        - using async await