== 1 Intro & Setup ==
    
    - What is NodeJS

        - JS Runtime environment to run JS on computers
            - written in C++, wraps around V8 Engine
                - V8 Engine written in C++ by Google team, embedded in Chrome

        - Read & Write files on computers
        - Connect to database
        - Act as server for content

        - Lose access to DOM
            - cannot interact with HTML element using NodeJS
            - cannot use document.querySelector in Node
                - document part of "window" object


    Benefits of Node as BackEnd
        - No need to learn extra language for Backend (if alrdy familiar)
        - share code b/w front-end & back-end
        - massive community, library & frameworks


== 2 Node.js Basics ==


    -- 2.1 global object in NodeJS --
        (https://nodejs.org/api/globals.html#global-objects)
        
        - Inside browser, known as "window" object
            - load of methods & properties accessible

        - Inside Node, known as "global" object
            - don't have to use "global" prefix (implied)

            i.e setTimeout() instead of global.setTimeout()



    -- 2.2 modules & require --

        - modules are simply JS files
        - need separate modules to keep code neat (modularity)
        - require() will simply execute js file, no data imported / exported
        
        inside people.js:
            const people = ['person1', 'person2'];
            const ages = [20, 23];

            module.exports = {
                people,
                ages
            };

        inside main.js:

            const data = require('./people');
            console.log(data.people, data.ages);


        Destructuring objects:
            - must be same name as property exported
        
        eg:

        inside main.js:

            const { people, ages } = require('./people');

            console.log(people);


        Core modules in JS:
            - also known as built-in modules (ships with Node) 
            (https://www.w3schools.com/nodejs/ref_modules.asp)

                assert
                buffer
                child_process
                cluster
                crypto
                dgram
                dns
                domain
                events
                fs
                http
                https
                net
                os
                path
                punycode
                querystring
                readline
                stream
                string_decoder
                timers
                tls
                tty
                url
                util
                v8
                vm
                zlib

    -- 2.3 File System --

        - 1 of the core modules that ship with Node for file manipulation
        - good for small files, for larger files, use Stream (see Section 2.4)
        - Read | Create | Delete files / directories

        CHECK IF FILE / DIR EXIST:
            - fs.existsSync(path)
                - returns boolean

        READING FILES:

            - fs.readFile(path, callback(err, data))
                - readFile is an async function
                - fires callback upon completion
                - data in buffer format, to show txt, use .toString method

        eg:

            const fs = require('fs');

            fs.readFile('./docs/blog1.txt', (err, data)=> {
                if (err) {
                console.log(err); 
                }
                console.log(data.toString());
            });
        
        WRITING FILES:
            - Overwrites file with new content provided
            - if file not exist, will create new txt file

            - fs.writeFile(path, dataToWrite, callback());

        eg:

            const fs = require('fs');

            fs.writeFile('./docs/blog1.txt', "Hello World", ()=> {
                console.log('Data successfully written');
            });

        DIRECTORIES:

            - fs.mkdir(path, callback)
            - if dir already exist, throws error
                - best practice to check if folder exist

            - fs.rmdir(path, callback)
                - to remove directory

            eg:

                const fs = require('fs');

                if (fs.existsSync('./assets')) {
                    fs.rmdir('./assets', (err) => {
                        if (err) {
                            console.log(err);
                        }
                    console.log("dir deleted");
                    });
                } else {
                    fs.mkdir('./assets', (err)=>{
                    if (err) {
                        console.log(err);
                    }
                    console.log("directory created");
                })
                }
        
        DELETING FILES:

            - fs.unlink(path, callback(err))

            eg:

                if (fs.existsSync('./docs/blog1.txt')) {
                    fs.unlink('./docs/blog1.txt', (err) => {
                        if (err) {
                            console.log(err);
                        }
                        console.log("File deleted");
                    })
                }


    -- 2.4 Streams & Buffers --
        - To handle larger files
        - Also using fs module in JS

        Streams:
            - Start using data before finished loading
                - small chunks of data (buffer) passed down the stream
            - Like video streaming instead of downloading entire video before watching
            - for fs module, must load entire file before using

        
        Also using fs module

            1) READ STREAMS & WRITE STREAMS

                - readStream.on('data') : EventListener for data event on stream

            eg:
            
            const fs = require('fs');

            const path = './docs/largeFile.txt';
            const writePath = './docs/newFile.txt';

            const readStream = fs.createReadStream(path, { encoding: 'utf8' }); // encoding will convert buffer to string
            const writeStream = fs.createWriteStream(writePath);

            readStream.on('data', (buf)=>{
                console.log("-- New Buffer --");
                console.log(buf);

                writeStream.write('\n New Buffer \n');
                writeStream.write(buf);
            });


        - Pipe Stream -
            - Transfer Readable Stream data to Writable Stream

                eg:

                const fs = require('fs');

                const path = './docs/largeFile.txt';
                const writePath = './docs/newFile.txt';

                const readStream = fs.createReadStream(path, { encoding: 'utf8' }); // encoding will convert buffer to string
                const writeStream = fs.createWriteStream(writePath);

                readStream.pipe(writeStream);



                



            

