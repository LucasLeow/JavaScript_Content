-- What is Asynchronous JS? --

	- Break down large project into smaller tasks
	- 3 connection concepts: (to connect smaller tasks together)
		- Callbacks
		- Promises
		- Async / Await
		
-- Synchronous vs Asynchronous --

	Synchronous:
		- Given task 1 to task 10
		- Only have 1 hand
		- Can only do task 1 to 10 sequentially, 1 by 1
		
	Asynchronous:
		- Given 10 tasks & 10 hands
		- Each hand perform 1 task, all at the same time
		

-- Using Asynchronous JS --
	- Can be used with setTimeout & setInterval functions
	
	eg: setTimeout(fn_to_run, 1000, values_passed_to_fn_to_run) 
	
		setTimeout((a,b) => {
			console.log(a, b);
		}, 1000, 5, 10);
		
		
		Synchronous implementation:
		
			console.log("Task 1");
			console.log("Task 2");
			console.log("Task 3");
			console.log("Task 4");
			console.log("Task 5");
			
		Asynchronous Implementation:
			setTimeout(() => {
				console.log("Task 1");
			}, 1000);
			
			setTimeout(() => {
				console.log("Task 2");
			}, 1000);
			
			setTimeout(() => {
				console.log("Task 3");
			}, 1000);
			
			setTimeout(() => {
				console.log("Task 4");
			}, 1000);
			
			setTimeout(() => {
				console.log("Task 5");
			}, 1000);
		
		
-- Callbacks --
	- Calling a function inside another function
	- forms connection between functions
	
	function one(call_two) {
		console.log("Step 1 complete.");
		call_two();
	}
	
	function two() {
		console.log("Performing step 2");
	}
	
	one(two);
	
Ice Cream Example with Callback
	1) Get ice-cream order from customer
	2) Fetch ingredients
	3) Start making ice cream
	4) Serve customer
	
	
-- Callback hell --
	- A series of nested callbacks, especially when using setTimeout
	
	eg.
	
	
	let stocks = {
	  fruits: ["strawberry", "grapes", "banana", "apple"],
	  liquid: ["water", "ice"],
	  holder: ["cone", "cup", "stick"],
	  toppings: ["chocolate", "peanuts"]
	};

let order = (fruit_idx, call_production) => {
	  setTimeout(() => {
		console.log(`${stocks.fruits[fruit_idx]} was selected`);
		call_production();
	  }, 2000);
	};

let production = () =>{

  setTimeout(()=>{
    console.log("production has started")
    setTimeout(()=>{
      console.log("The fruit has been chopped")
      setTimeout(()=>{
        console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} Added`)
        setTimeout(()=>{
          console.log("start the machine")
          setTimeout(()=>{
            console.log(`Ice cream placed on ${stocks.holder[1]}`)
            setTimeout(()=>{
              console.log(`${stocks.toppings[0]} as toppings`)
              setTimeout(()=>{
                console.log("serve Ice cream")
              },2000)
            },3000)
          },2000)
        },1000)
      },1000)
    },2000)
  },0000)

};


order(0,production);


-- Promises --
	- Solution to Callback hell
	- Callback forms relationship (Grandparent -> parent -> children etc.)
	- Promises take instructions (do task1 then task2 then task3 etc.)
		- can keep code clean
		
	-- Promise cycle --
		1) Promise is made (Pending)
		2) Becomes either RESOLVE or REJECT
		3) if RESOLVE:
			- .then().then().then() etc.
		4) if REJECT:
			- .catch()
		5) .finally() // will always run (optional)

	-- 4 more essential concepts of promises --
		1) Time & Tasks
			- Each task requires some time to execute
		2) Promise chaining
			- .then().then().then() etc.
			- return from previous .then() passes on to next .then() as parameter
		3) Error handling
			- .catch()
		4) .finally() handler
		
		
	eg.
	
		let stocks = {
		  fruits: ["strawberry", "grapes", "banana", "apple"],
		  liquid: ["water", "ice"],
		  holder: ["cone", "cup", "stick"],
		  toppings: ["chocolate", "peanuts"]
		};

		let is_shop_open = true;

		let order = ((time, task) => {
		  return new Promise((resolve, reject) => {
			if (is_shop_open) {
			  
			  setTimeout(() => {
				resolve(task());
			  }, time)
			} else {
			  reject(console.log("Shop is closed"));
			}
		  })
		})

		order(1000, () => {
		  console.log(`${stocks.fruits[0]} was selected`);
		})

		.then(()=> {
		  return order(0000, () => {
			console.log("production started");
		  })
		})

		.then(() => {
		  return order(2000, () => {
			console.log("Fruit was chopped");
		  })
		})

		.then(() => {
		  return order(2000, () => {
			console.log("Water & ice added");
		  })
		})

		.then(() => {
		  return order(1000, () => {
			console.log("machine started");
		  })
		})

		.then(() => {
		  return order(2000, () => {
			console.log("Ice cream served");
		  })
		})
		
		.catch(() => {
			console.log("Customer left");
		})
		
		.finally(() => {
			console.log("Day ended, shop is closed");
		})
	
	/* return is needed to put promises into sequence. Else, all will execute parallel
	


-- Async/Await --
	- Proclaimed better way to write promises
	- shorter way to write promise
		
		- async
		- try & catch
		- await
	
	async function order () {
		try{
			await task;
		}
		catch(error) {
			console.log("task doesn't exist yet", error);
		}
		finally{
			console.log("Run code anyway");
		}
	}
	
	order();
	
	order()
	.then(() => {
		console.log("Can also use .then()");
	})
	
	
	- Await -
	
	let toppings_choice = () => {
		return new Promise((resolve, reject) => {
			setTimeout(()=>{
				resolve(console.log("Retrieving toppings"));
			}, 3000)
		});
	}
	
	async function kitchen() {
	
		console.log("Station 1");
		console.log("Station 2");
		console.log("Station 3");
		await toppings_choice();
		console.log("Station 4");
		console.log("Station 5");
	}
	
	kitchen()
	
	- Ice Cream Shop eg -
	
		let stocks = {
	  fruits: ["strawberry", "grapes", "banana", "apple"],
	  liquid: ["water", "ice"],
	  holder: ["cone", "cup", "stick"],
	  toppings: ["chocolate", "peanuts"]
	};

	let is_shop_open = true;
	
	function task(time) {
		return new Promise((resolve, reject) => {
			if (is_shop_open) {
				setTimeout(resolve, time);
			} else {
				reject(console.log("shop is closed"));
			}
		});
	}
	
	async function kitchen() {
		try{
		
			await task(2000);
			console.log(`${stocks.fruits[0]} selected`)
			
			await task(0000);
			console.log("Production Started")
			
			await task(2000);
			console.log("Fruit is cut")
			
			await task(2000);
			console.log("Water & Ice added");
			
			await task(2000);
			console.log("Machine started");
			
			await task(2000);
			console.log("Ice cream served");
			
			
		}
		
		catch(err){
			console.log("Customer left", err);
		}
		
		finally{
			console.log("Day ended, shop is closed");
		}
	}