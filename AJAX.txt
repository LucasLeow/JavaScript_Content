~~ 1 AJAX (Asynchronous Javascript & XML) ~~
	- ability of JS code to make requests for new files to be sent to current browser
	- the new files received do not replace the current page of browser
	- files can be used by JS depending on code
		- eg: extract certain info. from file and replace only certain content on page
	
	Benefits:
		- Don't have to reload the entire webpage just to update certain portion of information
		- First used by googlemaps, whereby movement of map can be done by updating certain grids of information
		- Instead of reloading the entire webpage information for every movement made
	
	New version of AJAX exists


~~ 2 ES6 Promises & Basic Syntax ~~
	- Promises are foundations for fetch() method
	- Promises are wrappers for functions (typically Async tasks but not compulsory)
		- AJAX calls
		- reading / writing files
		- timeouts
		- geolocation (location communication)
		- talking to database

	- Async tasks: Don't know when results will be retrieved
	- fetch() returns a Promise
	- Promise(function) // function may be sync / async
	
	- Promise define internally 2 callback functions
		1) When Promise successfully returned
		2) When Promise fails
	- Promise can only call resolve() or reject(), cannot be both
	
	- Promise can be called using .then() function
		Promise.then(function(response_from_promise))
		- if .then() function runs successfully, it means that Promise.resolve() was called
		- .then(x), x is any value passed as argument from resolve(), eg: resolve(x)
			- where x can be for eg: let x = 5; 
			
	- Promise must end with .catch() function to handle reject() from Promises
		- or to handle errors from .then() function call
		- .catch(callback_function(e)), e is the value passed to reject(x)
		
	eg:
	// resolve & reject are naming conventions
	// resolve & reject are both functions
	// resolve will be called when Promise successfully returned
	// reject will be called if Promise fails
	// resolve and reject cannot occur together (i.e choose 1 only)
	// whatever was passed in resolve argument will be received as parameter in then() fn
		- eg: resolve(a,b,c,d) .then((a,b,c,d) => {})
	
	let p1 = new Promise((resolve, reject) => {
		let x = 5;
		let y = 6;
	// resolve(x);
		reject(y);
	})
	
	p1.then((x) => {
		console.log(x);
		return x; // passes x to the next .then() method
	}).then( (x) => {
		console.log(x);
	}).catch( (y) => {
		console.log("Caught", y);
	})


~~ 14 "fetch" method for AJAX ~~
	- latest version of AJAX supported by browsers
	- making a HTTP request to retrieve resource(s)
	- fetch does not necessarily display the fetched resource as webpage
	- the fetched resource can be manipulated within the JS code
	- .then(callback fn(response)) can be used to perform certain actions after resource fetched
	eg. (need to npm install node-fetch in directory first)
	
	const root = "http://jsonplaceholder.typicode.com";
		
	let id = Math.floor(Math.random() * 20) + 1; // id 1 to 21
	let uri = root + "/users/" + id;

	console.log("FETCH: ", uri);

	fetch(uri)
	.then(function(response) { // response is the data fetched 
		return response.json(); // then from the file, extract the JSON data (may / may not be json)
	})
	.then((data) => { 
		console.log(data);
		let stringJSON = JSON.stringify(data);
		let output = document.getElementById("output");
		output.textContent = stringJSON;
	})
	.catch((e) => {
		let output = document.getElementById("output");
		output.textContent = "id > 10";
	})
	
~~ 15 Fetch with Request & Headers Objects

	eg.
	const uri = "http://jsonplaceholder.typicode.com/users"; // returning sample JSON data 
	
	let h = new Headers();
	h.append("Accept", "application/json"); // type of file willing to accept
		- server may have other file types but we specify only willing to accept json
		- | "Content-Type" | "Content-Length" | : Typically headers for POST / PUT 
		- "Accept" | "Accept-Language" | 
		- "X-Requested-With" : Custom (In many JS frameworks)
			- X-Requested-With XML / HTTP Request
			- server knows its AJAX request
		- "User-Agent" : Custom user-agent for script
		
	let r = new Request(uri, {
		method: "GET",
		headers: h,
		mode: "cors"
	});
	
	fetch(req)
	.then( (response) => {
		if (response.ok){ // returns boolean
			return response.json();
		} else {
			throw new Error("Error Receiving HTTP Request");
		}
	})
	.then( (jsonData) => {
		console.log(jsonData);
	}).catch( e => {
		console.log(e.message);
	})
	
	// new Request(uri)
	// new Request(uri, options)
	// options : method, header, body, mode (4 common ones, there exist others)
	// method : (status: 200 = OK)
		- GET: Receive data from uri
		- POST: Sending data to server (update existing value) (status 201: POST)
		- PUT: Inserting new data
		- DELETE: remove data from server
		- OPTIONS: just headers for checking / testing
	// header: Request Headers | Response Headers
	// body: if POST / PUT: Then its the content to send
	// mode: "cors": Cross origin resource sharing 
		- policy on server whether requester can view/use data received
		
		
~~ 16 Sending AJAX Form Data to Server with fetch() method ~~
