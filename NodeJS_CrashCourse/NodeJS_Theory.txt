Learnings in this text:
    - NodeJS global object
    - NodeJS "fs" module
    - NodeJS Server using "http" module
        - Request | Response object
        - serving HTML using "fs" module (routes)
        - 


== 1 Intro & Setup ==
   
    - What is NodeJS

        - JS Runtime environment to run JS on computers
            - written in C++, wraps around V8 Engine
                - V8 Engine written in C++ by Google team, embedded in Chrome

        - Read & Write files on computers
        - Connect to database
        - Act as server for content

        - Lose access to DOM
            - cannot interact with HTML element using NodeJS
            - cannot use document.querySelector in Node
                - document part of "window" object


    Benefits of Node as BackEnd
        - No need to learn extra language for Backend (if alrdy familiar)
        - share code b/w front-end & back-end
        - massive community, library & frameworks



== 2 Node.js Basics ==


    -- 2.1 global object in NodeJS --
        (https://nodejs.org/api/globals.html#global-objects)
        
        - Inside browser, known as "window" object
            - load of methods & properties accessible

        - Inside Node, known as "global" object
            - don't have to use "global" prefix (implied)

            i.e setTimeout() instead of global.setTimeout()



    -- 2.2 modules & require --

        - modules are simply JS files
        - need separate modules to keep code neat (modularity)
        - require() will simply execute js file, no data imported / exported
        
        inside people.js:
            const people = ['person1', 'person2'];
            const ages = [20, 23];

            module.exports = {
                people,
                ages
            };

        inside main.js:

            const data = require('./people');
            console.log(data.people, data.ages);


        Destructuring objects:
            - must be same name as property exported
        
        eg:

        inside main.js:

            const { people, ages } = require('./people');

            console.log(people);


        Core modules in JS:
            - also known as built-in modules (ships with Node) 
            (https://www.w3schools.com/nodejs/ref_modules.asp)

                assert
                buffer
                child_process
                cluster
                crypto
                dgram
                dns
                domain
                events
                fs
                http
                https
                net
                os
                path
                punycode
                querystring
                readline
                stream
                string_decoder
                timers
                tls
                tty
                url
                util
                v8
                vm
                zlib

    -- 2.3 File System --

        - 1 of the core modules that ship with Node for file manipulation
        - good for small files, for larger files, use Stream (see Section 2.4)
        - Read | Create | Delete files / directories

        CHECK IF FILE / DIR EXIST:
            - fs.existsSync(path)
                - returns boolean

        READING FILES:

            - fs.readFile(path, callback(err, data))
                - readFile is an async function
                - fires callback upon completion
                - data in buffer format, to show txt, use .toString method

        eg:

            const fs = require('fs');

            fs.readFile('./docs/blog1.txt', (err, data)=> {
                if (err) {
                console.log(err); 
                }
                console.log(data.toString());
            });
        
        WRITING FILES:
            - Overwrites file with new content provided
            - if file not exist, will create new txt file

            - fs.writeFile(path, dataToWrite, callback());

        eg:

            const fs = require('fs');

            fs.writeFile('./docs/blog1.txt', "Hello World", ()=> {
                console.log('Data successfully written');
            });

        DIRECTORIES:

            - fs.mkdir(path, callback)
            - if dir already exist, throws error
                - best practice to check if folder exist

            - fs.rmdir(path, callback)
                - to remove directory

            eg:

                const fs = require('fs');

                if (fs.existsSync('./assets')) {
                    fs.rmdir('./assets', (err) => {
                        if (err) {
                            console.log(err);
                        }
                    console.log("dir deleted");
                    });
                } else {
                    fs.mkdir('./assets', (err)=>{
                    if (err) {
                        console.log(err);
                    }
                    console.log("directory created");
                })
                }
        
        DELETING FILES:

            - fs.unlink(path, callback(err))

            eg:

                if (fs.existsSync('./docs/blog1.txt')) {
                    fs.unlink('./docs/blog1.txt', (err) => {
                        if (err) {
                            console.log(err);
                        }
                        console.log("File deleted");
                    })
                }


    -- 2.4 Streams & Buffers --
        - To handle larger files
        - Also using fs module in JS

        Streams:
            - Start using data before finished loading
                - small chunks of data (buffer) passed down the stream
            - Like video streaming instead of downloading entire video before watching
            - for fs module, must load entire file before using

        
        Also using fs module

            1) READ STREAMS & WRITE STREAMS

                - readStream.on('data') : EventListener for data event on stream

            eg:
            
            const fs = require('fs');

            const path = './docs/largeFile.txt';
            const writePath = './docs/newFile.txt';

            const readStream = fs.createReadStream(path, { encoding: 'utf8' }); // encoding will convert buffer to string
            const writeStream = fs.createWriteStream(writePath);

            readStream.on('data', (buf)=>{
                console.log("-- New Buffer --");
                console.log(buf);

                writeStream.write('\n New Buffer \n');
                writeStream.write(buf);
            });


        - Pipe Stream -
            - Transfer Readable Stream data to Writable Stream

                eg:

                const fs = require('fs');

                const path = './docs/largeFile.txt';
                const writePath = './docs/newFile.txt';

                const readStream = fs.createReadStream(path, { encoding: 'utf8' }); // encoding will convert buffer to string
                const writeStream = fs.createWriteStream(writePath);

                readStream.pipe(writeStream);




== 3 Node Clients & Servers ==

    - communication b/w website & server
    - when running server side code, console log will be on server console, not browser

    IP Address
        - address assigned to each device connected to internet
    
    Domain
        - English name mapped to IP Addresses to make it easier to remember

    -- Creating Server in Node --
        - using http module in Node
        (https://www.w3schools.com/nodejs/nodejs_http.asp)

        1) create server.js file

                const http = require('http');

                // callback fn executes whenever requests received by server
                const server = http.createServer((req, res) => {
                    console.log('request made');
                });

                const PORT = 3000;

                // default is localhost
                server.listen(PORT, 'localhost', () => {
                    console.log(`Listening for requests on port ${PORT}`);
                });


        localhost: Loopback IP Address
            - 127.0.0.1 (Points back to own computer)
        
        Port Number:
            - A specific channel / Gateway on computer 
            - "doors" into computer for internet connection to different programs
            - 65,535 possible ports



== 4 Requests & Response Object ==


    REQUEST OBJECT: 

        - request object contains load of information
        - console log will show entire request object

                const server = http.createServer((req, res) => {
                    console.log(req);
                });

        - some useful request properties:
            - req.url (gives the url, useful for sending relevent response)
            - req.method (HTTP method of request)


                const server = http.createServer((req, res) => {
                    console.log(req.url, req.method);
                });

    
    RESPONSE OBJECT:
        
        - sent by server to browser

        Response headers
            - provide metadata to Client
            - some default automatically set

            eg:
                - what data to expect
                    - JSON
                    - text
                    - pdf
                    - html etc.

                - set cookies


                const server = http.createServer((req, res) => {
                    console.log(req.url, req.method);

                    res.setHeader('Content-Type', 'text/plain');
                    res.write('hello, world');
                    res.end();
                });

                To return HTML:
                

                const server = http.createServer((req, res) => {
                    console.log(req.url, req.method);

                    res.setHeader('Content-Type', 'text/html');
                    res.write("<h1> Hello world </h1>");
                    res.write("<p> Hello world </p>");
                    res.end();
                });

    -- RETURNING HTML PAGES --

        1) Create "views" dir to store html PAGES
        2) create index.html & initialize default template
            - add <h1> Home Page </h1> in body

        3) go to server.js

                const http = require('http');
                const fs = require("fs");

                const server = http.createServer((req, res) => {
                    console.log(req.url, req.method);

                    // set response header
                    res.setHeader('Content-Type', 'text/html');

                    // send html file
                    fs.readFile('./views/index.html', (err, data) => {
                        if (err) {
                            console.log(err);
                            res.end();
                        } else {
                            res.write(data);
                            res.end();
                        }
                    });
                });

                const PORT = 3000;
                server.listen(PORT, 'localhost', () => {
                    console.log(`Listening for requests on port ${PORT}`);
                });


    -- Basic Routing --

        - send desired resource according to URL provided

            1) Create about.html in "views" dir
                - add h1 : about
            2) Create error.html in "views" dir
                - add h1 : Error, page not found
            3) Go to server.js
                3.1) Checking url provided


                const http = require('http');
                const fs = require("fs");

                const server = http.createServer((req, res) => {
                    console.log(req.url, req.method);

                    let path = './views/';
                    switch(req.url) {
                        case '/' : 
                            path += 'index.html';
                            break;
                        case '/about': {
                            path += 'about.html';
                            break;
                        }
                        default: {
                            path += 'error.html';
                        }
                    }

                    // set response header
                    res.setHeader('Content-Type', 'text/html');

                    // send html file
                    fs.readFile(path, (err, data) => {
                        if (err) {
                            console.log(err);
                            res.end();
                        } else {
                            res.write(data);
                            res.end();
                        }
                    });
                });

                const PORT = 3000;
                server.listen(PORT, 'localhost', () => {
                    console.log(`Listening for requests on port ${PORT}`);
                });

    -- Status Codes --
        - 1xx - information
        - 2xx - successfully
        - 3xx - redirect
        - 4xx - client errors
        - 5xx - server errors
        

                    switch(req.url) {
                        case '/' : 
                            path += 'index.html';
                            res.statusCode = 200;
                            break;
                        case '/about': {
                            path += 'about.html';
                            res.statusCode = 200;
                            break;
                        }
                        default: {
                            path += 'error.html';
                            res.statusCode = 404;
                        }
                    }
            - In dev tools, network, can see status codes


    -- Redirecting of Resources --

                    switch(req.url) {
                        case '/' : 
                            path += 'index.html';
                            res.statusCode = 200;
                            break;
                        case '/about': {
                            path += 'about.html';
                            res.statusCode = 200;
                            break;
                        }
                    


                    // redirection here using setHeader

                                    case '/about-me': {
                                        console.log(path);
                                    
                                        res.writeHead(301, {
                                            Location: '/about'
                                        });
                                        
                                        break;
                                    }




                        default: {
                            path += 'error.html';
                            res.statusCode = 404;
                        }
                    }



== 5 Node Package Manager (npm) ==
    - packages not in node core
    - written by other users / companies
    - frameworks

    - automatically installed together with Node

    https://npmjs.com
        - search for different packages available

        -- Popular node packages --
            1) nodemon
                - helps to refresh server everytime changes saved

                    - npm install nodemon
                    - use "nodemon" cmd instead of "node"

    
    -- Creating package.json file --

        1) Create project directory
        2) npm init -y 
            package-lock.json
                - keeps track of depedencies of packages

            - dependencies 
                - tracks packages used in project

            - node_modules
                - all packages will be installed inside node_modules

    -- Sharing files --
        - node_modules may be very large
        - upload all project code except node_modules
        - download entire code into project directory
        - open project directory
            - npm install
                - automatically installs all dependencies

== 6 Express Framework ==
    - previously use "http" library to handle requests
    - Express framework helps manage routing / requests / server side routing / logic
    - Don't have to use Express, can simply use node

        1) create project directory
        2) npm i express
        3) create app.js in project dir

                const express = require('express');

                // Create instance of express object
                const app = express();

                app.listen(3000); // returns instance of server (can save in var for websockets)

                // 1st argument: url path to listen for, 2nd argument: callback when request received
                app.get('/', (req, res) => {
                    res.send('<p>Home App </p>'); // automatically infers content type & set in headers
                    // dont have to res.setHeader("Content-Type", 'text/html');
                });


            4) Creating Routing to deliver resources (HTML pages)
                    app.get('/', (req, res) => {
                        res.send("<p> Send automatically detects content-type </p>")// automatically infers content type & set in headers
                        res.sendFile('./views/index.html', {root: 'h:/SelfLearning/BackEnd/JavaScript/NodeJS_CrashCourse'}); 
                            - sendFile takes in absolute path
                            - therefore, if provide relative path, need to specify absolute path leading to resource folder
                    });

                    app.get('/about', (req, res) => {
                        res.sendFile('./views/about.html', {root: 'h:/SelfLearning/BackEnd/JavaScript/NodeJS_CrashCourse'});
                    });

                    app.get('/about-us', (req, res) => {
                        res.redirect('/about');
                    })

                    app.use((req, res) => {
                        res.status(404).sendFile('./views/error.html', {root: 'h:/SelfLearning/BackEnd/JavaScript/NodeJS_CrashCourse'});
                            - have to chain status since use() does not detect that the following is an error, its simply a middleware callback fn
                    })

                    // .use(callback) is a middleware that will fire whenever request received
                        - not scoped to any particular path
                        - will fire for any request regardless of URL if code manage to reach that point
                        - sequence matters, will fire if about any routes

        
                



            

